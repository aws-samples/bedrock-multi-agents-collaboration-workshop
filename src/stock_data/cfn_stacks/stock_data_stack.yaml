AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation template deploy Stock Data functionality using Amazon Bedrock Agents
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Web Search API keys
        Parameters:
          - SerperApiKey
          - TavilyApiKey

Parameters:
  LayerName:
    Type: String
    Description: Layer name for Stock Data Lambda Function
    Default: stock-data-layer
  
Resources:
  ######################
  ##### StockData #####
  ####################

  AgentLambdaFunction:
    DependsOn: CustomLayerResource
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Layers: 
        - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:{LayerName}:1
      Handler: lambda.lambda_handler
      Role: !GetAtt AgentLambdaRole.Arn
      Timeout: 300
      Code:
        ZipFile: !Sub |
          import json
          import yfinance as yf 

          def get_named_parameter(event, name):
              return next(item for item in event['parameters'] if item['name'] == name)['value']
              
          def populate_function_response(event, response_body):
              return {'response': {'actionGroup': event['actionGroup'], 'function': event['function'],
                          'functionResponse': {'responseBody': {'TEXT': {'body': str(response_body)}}}}}

          def get_price_history(ticker):
              # lookup stock price
              stock = yf.Ticker(ticker)

              # get the price history for past 1 month
              hist = stock.history(period="1mo")

              # convert the price history to JSON format. Make date and timestamps be human readable strings.
              hist = hist.reset_index().to_json(orient="split", index=False, date_format="iso")  
              return hist  

          def lambda_handler(event, context):
              print(event)
              
              function = event['function']

              ticker = get_named_parameter(event, 'ticker')

              if function == 'stock_data_lookup':
                  hist = get_price_history(ticker)
                  result = f"Price history for last 1 month for ticker: {ticker} is as follows:\n{str(hist)}"

              response = populate_function_response(event, result)
              print(response)
              return response

  AgentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  
  AgentAliasLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AgentLambdaFunction.Arn
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*

  AgentLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AgentLambdaFunction.Arn
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*
  
  ##################################
  ##### Custom Layer Resource #####
  ################################

  CustomLayerResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaLayerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:PublishLayerVersion
                  - lambda:DeleteLayerVersion
                  - lambda:GetLayerVersion
                  - lambda:ListLayers
                  - lambda:ListLayerVersions
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:${LayerName}:*

  CustomLayerResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      FunctionName: stock_data_lookup
      Role: !GetAtt CustomLayerResourceRole.Arn
      Timeout: 300
      Runtime: python3.12
      Code:
        ZipFile: |
          from time import sleep
          import os
          import subprocess
          from pathlib import Path
          import shutil 
          from pip._internal import main
          import boto3
          from botocore.exceptions import ClientError

          lambda_client = boto3.client('lambda')

          def create_lambda_layer(layer_name):
              base_path = "/tmp/layer"
              Path(f"{base_path}").mkdir(parents=True, exist_ok=True)
              # Create directory structure
              Path(f"{base_path}/python").mkdir(parents=True, exist_ok=True)

              print("Installing Packages!")
              # Install packages
              # subprocess.check_call(f'pip3 install yfinance -t {base_path}/pyhthon --no-cache-dir --use-deprecated=legacy-resolver'.split())
              main(f'install -I -q yfinance --target {base_path}/pyhthon --no-cache-dir --disable-pip-version-check'.split())

              print("Zipping Content")
              shutil.make_archive(
                  base_name=f"{base_path}/layer",  # will create layer.zip
                  format="zip",
                  root_dir=base_path,
                  base_dir="python"
              )

              with open(f"{base_path}/layer.zip", 'rb') as zip_file:
                  response = lambda_client.publish_layer_version(
                      LayerName=f'{layer_name}-layer',
                      Description='Stock Data Action Group lambda layer',
                      Content={
                          'ZipFile': zip_file.read()
                      },
                      CompatibleRuntimes=[
                          'python3.7', 'python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12'
                      ],
                      CompatibleArchitectures=['x86_64']
                  )

              print(f"Layer created successfully. Version: {response['Version']}")
              print(f"Layer ARN: {response['LayerVersionArn']}")

              # Clean up
              os.system("rm -rf layer")

              return response['LayerVersionArn']

          def handler(event, context):
            try:
              request_type = event['RequestType']
              layer_name = event['ResourceProperties']['LAYERNAME']
              if request_type == 'Create':
                layer_arn = create_lambda_layer(layer_name)
              elif request_type == 'Delete':
                lambda_client.delete_layer_version(
                    LayerName=layer_name,
                    VersionNumber=1
                )
            except Exception as ex:
              print(ex)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
            else:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

  CustomLayerResource:
    Type: Custom::BuildCode
    Properties:
      ServiceToken: !GetAtt CustomLayerResourceFunction.Arn
      LAYERNAME: !Ref LayerName


Outputs:
 StockDataLambdaFunction:
    Value: !Ref AgentLambdaFunction