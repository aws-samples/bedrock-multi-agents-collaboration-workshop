Step-by-step guide to create a forecast process for time-series data using scikit-learn:

1. Import necessary libraries:
```python
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
```

2. Load and preprocess the data:
```python
# Load data from JSON file
df = pd.read_json('data.json', lines=True)

# Convert 'day' column to datetime
df['day'] = pd.to_datetime(df['day'])

# Set 'day' as the index
df.set_index('day', inplace=True)

# Sort the dataframe by date
df.sort_index(inplace=True)

# Group by date and sum the power readings
daily_power = df.groupby(df.index.date)['sumPowerReading'].sum().reset_index()
daily_power.columns = ['date', 'power']
daily_power['date'] = pd.to_datetime(daily_power['date'])
daily_power.set_index('date', inplace=True)
```

3. Create features for the model:
```python
# Create lag features
for i in range(1, 8):
    daily_power[f'lag_{i}'] = daily_power['power'].shift(i)

# Create day of week feature
daily_power['day_of_week'] = daily_power.index.dayofweek

# Drop NaN values
daily_power.dropna(inplace=True)
```

4. Prepare data for modeling:
```python
# Split features and target
X = daily_power.drop('power', axis=1)
y = daily_power['power']

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Scale the features
scaler = StandardScaler()
X