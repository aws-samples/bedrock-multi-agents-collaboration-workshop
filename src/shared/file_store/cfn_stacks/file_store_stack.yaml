AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation template deploy File Store functionality using AWS Lambda Function
  
Resources:
  ######################
  ##### FileStore #####
  ####################

  AgentLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      FunctionName: file_store
      Handler: index.lambda_handler
      Role: !GetAtt AgentLambdaRole.Arn
      Timeout: 300
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          from botocore.config import Config

          long_invoke_time_config = Config(read_timeout=600)

          FILE_STORAGE_FOLDER = 'AGENT_FILE_STORE'

          def get_named_parameter(event, name):
              if event['parameters']:
                  for item in event['parameters']:
                      if item['name'] == name:
                          return item['value']
              return None
                  
          def populate_function_response(event, response_body):
              return {'response': {'actionGroup': event['actionGroup'], 'function': event['function'],
                          'functionResponse': {'responseBody': {'TEXT': {'body': str(response_body)}}}}}

          def save_file(bucket: str, file_name: str, contents: str, folder_name: str):
              print(f"Save file to s3, bucket: {bucket}, folder: {folder_name}, file: {file_name}, contents:\n{contents}")
              # use boto3 to save contents to file in bucket
              s3 = boto3.resource('s3', config=long_invoke_time_config)
              response = s3.Object(bucket, f'{FILE_STORAGE_FOLDER}/{folder_name}/{file_name}').put(Body=contents)
              print(f"s3 response: {response}")
              return

          def get_file(bucket: str, file_name: str, folder_name: str) -> str:
              print(f"Get file from s3, bucket: {bucket}, folder: {folder_name}, file: {file_name}")
              # use boto3 to get file from bucket
              s3 = boto3.resource('s3', config=long_invoke_time_config)
              response = s3.Object(bucket, f'{FILE_STORAGE_FOLDER}/{folder_name}/{file_name}').get()
              print(f"s3 response status: {response['ResponseMetadata']['HTTPStatusCode']}")
              contents = response['Body'].read().decode('utf-8')
              return str(contents)

          def lambda_handler(event, context):
              print(event)
              
              function = event['function']
              session_id = event['sessionId']

              print(f"Event parameters: {event['parameters']}")
              bucket = get_named_parameter(event, 'bucket')
              file_name = get_named_parameter(event, 'file_name')
              folder_name = get_named_parameter(event, 'folder_name')
              if folder_name is None:
                  folder_name = session_id

              if function == 'save_file':
                  contents = get_named_parameter(event, 'contents')
                  save_file(bucket, file_name, contents, folder_name)
                  result = f"Stored contents to s3://{bucket}/{FILE_STORAGE_FOLDER}/{session_id}/{folder_name}. Contents were: {contents}"

              elif function == 'get_file':
                  contents = get_file(bucket, file_name, folder_name)
                  result = f"Retrieved contents from s3://{bucket}/{FILE_STORAGE_FOLDER}/{folder_name}/{file_name}. Contents were: {contents}"
              
              else:
                  result = f"Invalid function sent to Lambda: {function}"

              response = populate_function_response(event, result)
              print(response)
              return response

  AgentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ListBucketWithPrefix
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::*
                Condition:
                  StringLike:
                    s3:prefix:
                      - AGENT_FILE_STORE/*
                      - CODE_INTERP_FILE_STORE/*
        - PolicyName: ReadWriteBucketWithPrefix
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::*/AGENT_FILE_STORE/*
                  - arn:aws:s3:::*/CODE_INTERP_FILE_STORE/*

  AgentAliasLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AgentLambdaFunction.Arn
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/*

  AgentLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AgentLambdaFunction.Arn
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*


Outputs:
 FileStoreLambdaFunction:
    Value: !Ref AgentLambdaFunction