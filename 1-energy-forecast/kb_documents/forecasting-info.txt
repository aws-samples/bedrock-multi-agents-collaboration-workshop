Step-by-step guide to create a forecast process for time-series data using scikit-learn:

1. Import necessary libraries:
```python
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import json
```

2. Load and preprocess the data:
```python
# Load JSON data
with open('data.json', 'r') as file:
    data = [json.loads(line) for line in file]

# Convert to DataFrame
df = pd.DataFrame(data)

# Convert 'day' to datetime
df['day'] = pd.to_datetime(df['day'])

# Set 'day' as index
df.set_index('day', inplace=True)

# Convert 'sumPowerReading' to float
df['sumPowerReading'] = df['sumPowerReading'].astype(float)
```

3. Create features:
```python
df['dayofweek'] = df.index.dayofweek
df['month'] = df.index.month
df['year'] = df.index.year
```

4. Prepare data for modeling:
```python
X = df[['dayofweek', 'month', 'year']]
y = df['sumPowerReading']

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
```

5. Train the Random Forest model:
```python
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)
```

6. Make predictions:
```python
y_pred = model.predict(